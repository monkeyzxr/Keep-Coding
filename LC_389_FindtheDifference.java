/**
 * Created by monkeyzxr on 2017/5/28.
 *
 Given two strings s and t which consist of only lowercase letters.

 String t is generated by random shuffling string s and then add one more letter at a random position.

 Find the letter that was added in t.

 Example:

 Input:
 s = "abcd"
 t = "abcde"

 Output:
 e

 Explanation:
 'e' is the letter that was added.
 *
 *
 */
import java.util.*;

// 我写：
/*
public class LC_389_FindtheDifference {
    public static char findTheDifference(String s, String t) {
        if(t.length()-s.length() != 1)
            return 'A';  //大写A，意味着无结果

        HashMap<Character, Integer> map = new HashMap<>();
        for(int i = 0; i < t.length(); i++){
            char c = t.charAt(i);   // hashmap存放t的char的个数
            if(map.containsKey(c)){
                map.put(c, map.get(c)+1);
            }
            else
                map.put(c,1);
        }

        for(int i = 0; i < s.length(); i++){
            char c = s.charAt(i);
            if(!map.containsKey(c))   // 如果s的一个char，不存在于t的map key里，那这个char一定是新added的char
                return c;
            if(map.containsKey(c))
                map.put(c, map.get(c)-1);  //如果s的一个char存在于t的map的key里，则map的char的个数减一。
        }

        for (int i = 0; i < t.length(); i++){
            char c = t.charAt(i);
            if(map.get(c) != 0)           //此时，谁的map里的个数不为零，这个char就是结果。
                return c;
        }

        return 'A';
    }

    public static void main(String[] args) {
        String s1 = "abcd";
        String t1 = "abcde";
        System.out.println(findTheDifference(s1,t1));

        String s2 = "abcd";
        String t2 = "abcd";
        System.out.println(findTheDifference(s2,t2));

        String s3 = "abcd";
        String t3 = "fabcd";
        System.out.println(findTheDifference(s3,t3));
    }

}
*/

//方法2：由于字符串t只比字符串s多了一个字符，
// 那么直接用t中所有字符值的和减去字符串s中字符值的和即可。
//https://my.oschina.net/styshoo/blog/752872

public class LC_389_FindtheDifference {
    public static char findTheDifference(String s, String t) {
        int s_sum = 0;
        int t_sum = 0;

        for (int i = 0; i < s.length(); i++){
            s_sum += (int)s.charAt(i);
        }

        for (int i = 0; i < t.length();i++){
            t_sum += (int)t.charAt(i);
        }

        int result= t_sum - s_sum;

        return (char)result;

    }

    public static void main(String[] args) {
        String s1 = "abcd";
        String t1 = "abcde";
        System.out.println(findTheDifference(s1,t1));

        String s2 = "abcd";
        String t2 = "abcd";
        System.out.println(findTheDifference(s2,t2));

        String s3 = "abcd";
        String t3 = "fabcd";
        System.out.println(findTheDifference(s3,t3));
    }

}


//方法3： 用bitwise XOR：

// The logic behind doing XOR is that if you XOR two identical values then its result is zero.
// Moreover XOR is associative: what this means is: x ^ (y ^ z) = (x ^ y) ^ z.
// Therefore if we XOR the characters in strings s and t and suppose s = 'abcd' and t = 'abcde', then:
// (a ^ b ^ c ^ d) ^ (a ^ b ^ c ^ d ^ e) = (a ^ a) ^ (b ^ b) ^ (c ^ c) ^ (d ^ d) ^ e = 0 ^ 0 ^ 0 ^ 0 ^ e = e
// Therefore by XOR'ing all characters in strings s and t the end result you get is the extra character added in t


/*
https://discuss.leetcode.com/topic/55912/java-solution-using-bit-manipulation

public char findTheDifference(String s, String t) {
	char c = 0;
	for (int i = 0; i < s.length(); ++i) {
		c ^= s.charAt(i);
	}
	for (int i = 0; i < t.length(); ++i) {
		c ^= t.charAt(i);
	}
	return c;
}

 */